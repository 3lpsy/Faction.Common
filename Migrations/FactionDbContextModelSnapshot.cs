// <auto-generated />
using System;
using Faction.Common.Backend.Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace Faction.Common.Migrations
{
    [DbContext(typeof(FactionDbContext))]
    partial class FactionDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn)
                .HasAnnotation("ProductVersion", "3.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            modelBuilder.Entity("Faction.Common.Models.Agent", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<bool?>("Admin")
                        .HasColumnType("boolean");

                    b.Property<string>("AesPassword")
                        .HasColumnType("character varying");

                    b.Property<int>("AgentTypeId")
                        .HasColumnType("integer");

                    b.Property<int?>("BeaconInterval")
                        .HasColumnType("integer");

                    b.Property<string>("ExternalIp")
                        .HasColumnName("ExternalIP")
                        .HasColumnType("character varying");

                    b.Property<string>("Hostname")
                        .HasColumnType("character varying");

                    b.Property<DateTime?>("InitialCheckin")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("InternalIp")
                        .HasColumnName("InternalIP")
                        .HasColumnType("character varying");

                    b.Property<double?>("Jitter")
                        .HasColumnType("double precision");

                    b.Property<DateTime?>("LastCheckin")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Name")
                        .HasColumnType("character varying");

                    b.Property<string>("OperatingSystem")
                        .HasColumnType("character varying");

                    b.Property<int>("PayloadId")
                        .HasColumnType("integer");

                    b.Property<int?>("Pid")
                        .HasColumnName("PID")
                        .HasColumnType("integer");

                    b.Property<string>("StagingId")
                        .HasColumnType("text");

                    b.Property<int>("StagingResponseId")
                        .HasColumnType("integer");

                    b.Property<int>("TransportId")
                        .HasColumnType("integer");

                    b.Property<string>("Username")
                        .HasColumnType("character varying");

                    b.Property<bool>("Visible")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.HasIndex("AgentTypeId");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasName("Agent_Name_key");

                    b.HasIndex("PayloadId");

                    b.HasIndex("TransportId");

                    b.ToTable("Agent");
                });

            modelBuilder.Entity("Faction.Common.Models.AgentCheckin", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int?>("AgentId")
                        .HasColumnType("integer");

                    b.Property<string>("HMAC")
                        .HasColumnType("text");

                    b.Property<string>("IV")
                        .HasColumnType("text");

                    b.Property<string>("Message")
                        .HasColumnType("character varying");

                    b.Property<DateTime?>("Received")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("SourceIp")
                        .HasColumnType("text");

                    b.Property<int>("TransportId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("AgentId");

                    b.HasIndex("TransportId");

                    b.ToTable("AgentCheckin");
                });

            modelBuilder.Entity("Faction.Common.Models.AgentTask", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Action")
                        .HasColumnType("character varying");

                    b.Property<int>("AgentId")
                        .HasColumnType("integer");

                    b.Property<string>("Command")
                        .HasColumnType("character varying");

                    b.Property<int?>("ConsoleMessageId")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("Created")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("AgentId");

                    b.HasIndex("ConsoleMessageId")
                        .IsUnique();

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasName("AgentTask_Name_key");

                    b.ToTable("AgentTask");
                });

            modelBuilder.Entity("Faction.Common.Models.AgentTaskMessage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int?>("AgentId")
                        .HasColumnType("integer");

                    b.Property<int?>("AgentTaskId")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("Created")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Hmac")
                        .HasColumnName("HMAC")
                        .HasColumnType("text");

                    b.Property<string>("Iv")
                        .HasColumnName("IV")
                        .HasColumnType("text");

                    b.Property<string>("Message")
                        .HasColumnType("character varying");

                    b.Property<bool?>("Sent")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.HasIndex("AgentId");

                    b.HasIndex("AgentTaskId")
                        .IsUnique();

                    b.ToTable("AgentTaskMessage");
                });

            modelBuilder.Entity("Faction.Common.Models.AgentTaskUpdate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("AgentId")
                        .HasColumnType("integer");

                    b.Property<bool?>("Complete")
                        .HasColumnType("boolean");

                    b.Property<string>("Content")
                        .HasColumnType("text");

                    b.Property<string>("ContentId")
                        .HasColumnType("text");

                    b.Property<string>("Message")
                        .HasColumnType("character varying");

                    b.Property<DateTime?>("Received")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool?>("Success")
                        .HasColumnType("boolean");

                    b.Property<int?>("TaskId")
                        .HasColumnType("integer");

                    b.Property<string>("TaskName")
                        .HasColumnType("text");

                    b.Property<string>("Type")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("AgentId");

                    b.HasIndex("TaskId");

                    b.ToTable("AgentTaskUpdate");
                });

            modelBuilder.Entity("Faction.Common.Models.AgentTransportType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("AgentTypeId")
                        .HasColumnType("integer");

                    b.Property<string>("BuildCommand")
                        .HasColumnType("character varying");

                    b.Property<string>("BuildLocation")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("character varying");

                    b.Property<string>("TransportTypeGuid")
                        .HasColumnType("character varying");

                    b.HasKey("Id");

                    b.HasIndex("AgentTypeId");

                    b.ToTable("AgentTransportType");
                });

            modelBuilder.Entity("Faction.Common.Models.AgentType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Authors")
                        .HasColumnType("text");

                    b.Property<string>("BuildCommand")
                        .HasColumnType("text");

                    b.Property<string>("BuildLocation")
                        .HasColumnType("text");

                    b.Property<string>("Guid")
                        .HasColumnType("character varying");

                    b.Property<int>("LanguageId")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .HasColumnType("character varying");

                    b.HasKey("Id");

                    b.HasIndex("LanguageId");

                    b.ToTable("AgentType");
                });

            modelBuilder.Entity("Faction.Common.Models.AgentTypeArchitecture", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("AgentTypeId")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .HasColumnType("character varying");

                    b.HasKey("Id");

                    b.HasIndex("AgentTypeId");

                    b.ToTable("AgentTypeArchitecture");
                });

            modelBuilder.Entity("Faction.Common.Models.AgentTypeConfiguration", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("AgentTypeId")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .HasColumnType("character varying");

                    b.HasKey("Id");

                    b.HasIndex("AgentTypeId");

                    b.ToTable("AgentTypeConfiguration");
                });

            modelBuilder.Entity("Faction.Common.Models.AgentTypeFormat", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("AgentTypeId")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .HasColumnType("character varying");

                    b.HasKey("Id");

                    b.HasIndex("AgentTypeId");

                    b.ToTable("AgentTypeFormat");
                });

            modelBuilder.Entity("Faction.Common.Models.AgentTypeOperatingSystem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("AgentTypeId")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .HasColumnType("character varying");

                    b.HasKey("Id");

                    b.HasIndex("AgentTypeId");

                    b.ToTable("AgentTypeOperatingSystem");
                });

            modelBuilder.Entity("Faction.Common.Models.AgentTypeVersion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("AgentTypeId")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .HasColumnType("character varying");

                    b.HasKey("Id");

                    b.HasIndex("AgentTypeId");

                    b.ToTable("AgentTypeVersion");
                });

            modelBuilder.Entity("Faction.Common.Models.AgentsModulesXref", b =>
                {
                    b.Property<int>("AgentId")
                        .HasColumnType("integer");

                    b.Property<int>("ModuleId")
                        .HasColumnType("integer");

                    b.HasKey("AgentId", "ModuleId");

                    b.HasIndex("ModuleId");

                    b.ToTable("AgentModulesXREF");
                });

            modelBuilder.Entity("Faction.Common.Models.AgentsTransportsXref", b =>
                {
                    b.Property<int>("AgentId")
                        .HasColumnType("integer");

                    b.Property<int>("TransportId")
                        .HasColumnType("integer");

                    b.HasKey("AgentId", "TransportId");

                    b.HasIndex("TransportId");

                    b.ToTable("AgentsTransportsXREF");
                });

            modelBuilder.Entity("Faction.Common.Models.ApiKey", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime?>("Created")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("Enabled")
                        .HasColumnType("boolean");

                    b.Property<byte[]>("Key")
                        .HasColumnType("bytea");

                    b.Property<DateTime?>("LastUsed")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Name")
                        .HasColumnType("character varying");

                    b.Property<int>("OwnerId")
                        .HasColumnType("integer");

                    b.Property<int?>("TransportId")
                        .HasColumnType("integer");

                    b.Property<string>("Type")
                        .HasColumnType("character varying");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.Property<bool>("Visible")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasName("ApiKey_Name_key");

                    b.HasIndex("TransportId")
                        .IsUnique();

                    b.HasIndex("UserId");

                    b.ToTable("ApiKey");
                });

            modelBuilder.Entity("Faction.Common.Models.Command", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int?>("AgentTypeId")
                        .HasColumnType("integer");

                    b.Property<string>("Artifacts")
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Help")
                        .HasColumnType("character varying");

                    b.Property<string>("MitreReference")
                        .HasColumnType("character varying");

                    b.Property<int?>("ModuleId")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .HasColumnType("character varying");

                    b.Property<bool>("OpsecSafe")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.HasIndex("AgentTypeId");

                    b.HasIndex("ModuleId");

                    b.ToTable("Command");
                });

            modelBuilder.Entity("Faction.Common.Models.CommandParameter", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("CommandId")
                        .HasColumnType("integer");

                    b.Property<string>("Help")
                        .HasColumnType("character varying");

                    b.Property<string>("Name")
                        .HasColumnType("character varying");

                    b.Property<int?>("Position")
                        .HasColumnType("integer");

                    b.Property<bool>("Required")
                        .HasColumnType("boolean");

                    b.Property<string>("Values")
                        .HasColumnType("character varying");

                    b.HasKey("Id");

                    b.HasIndex("CommandId");

                    b.ToTable("CommandParameter");
                });

            modelBuilder.Entity("Faction.Common.Models.ConsoleMessage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("AgentId")
                        .HasColumnType("integer");

                    b.Property<int?>("AgentTaskId")
                        .HasColumnType("integer");

                    b.Property<string>("Content")
                        .HasColumnType("character varying");

                    b.Property<string>("Display")
                        .HasColumnType("text");

                    b.Property<DateTime?>("Received")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Type")
                        .HasColumnType("text");

                    b.Property<int?>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("AgentId");

                    b.HasIndex("UserId");

                    b.ToTable("ConsoleMessage");
                });

            modelBuilder.Entity("Faction.Common.Models.ErrorMessage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Details")
                        .HasColumnType("character varying");

                    b.Property<string>("Message")
                        .HasColumnType("character varying");

                    b.Property<string>("Source")
                        .HasColumnType("character varying");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.ToTable("ErrorMessage");
                });

            modelBuilder.Entity("Faction.Common.Models.FactionFile", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int?>("AgentId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Hash")
                        .HasColumnType("character varying");

                    b.Property<bool?>("HashMatch")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LastDownloaded")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Name")
                        .HasColumnType("character varying");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.Property<bool>("Visible")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.HasIndex("AgentId");

                    b.HasIndex("UserId");

                    b.ToTable("FactionFile");
                });

            modelBuilder.Entity("Faction.Common.Models.IOC", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Action")
                        .HasColumnType("character varying");

                    b.Property<int>("AgentTaskUpdateId")
                        .HasColumnType("integer");

                    b.Property<string>("Description")
                        .HasColumnType("character varying");

                    b.Property<string>("Hash")
                        .HasColumnType("character varying");

                    b.Property<string>("Identifier")
                        .HasColumnType("character varying");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Type")
                        .HasColumnType("text");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("AgentTaskUpdateId");

                    b.HasIndex("UserId");

                    b.ToTable("IOC");
                });

            modelBuilder.Entity("Faction.Common.Models.Language", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Name")
                        .HasColumnType("character varying");

                    b.HasKey("Id");

                    b.ToTable("Language");
                });

            modelBuilder.Entity("Faction.Common.Models.Module", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Authors")
                        .HasColumnType("character varying");

                    b.Property<string>("BuildCommand")
                        .HasColumnType("character varying");

                    b.Property<string>("BuildLocation")
                        .HasColumnType("character varying");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<int>("LanguageId")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .HasColumnType("character varying");

                    b.HasKey("Id");

                    b.HasIndex("LanguageId");

                    b.ToTable("Module");
                });

            modelBuilder.Entity("Faction.Common.Models.Payload", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("AgentTransportTypeId")
                        .HasColumnType("integer");

                    b.Property<int>("AgentTypeArchitectureId")
                        .HasColumnType("integer");

                    b.Property<int>("AgentTypeConfigurationId")
                        .HasColumnType("integer");

                    b.Property<int>("AgentTypeFormatId")
                        .HasColumnType("integer");

                    b.Property<int>("AgentTypeId")
                        .HasColumnType("integer");

                    b.Property<int>("AgentTypeOperatingSystemId")
                        .HasColumnType("integer");

                    b.Property<int>("AgentTypeVersionId")
                        .HasColumnType("integer");

                    b.Property<int>("BeaconInterval")
                        .HasColumnType("integer");

                    b.Property<string>("BuildToken")
                        .HasColumnType("text");

                    b.Property<bool?>("Built")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("Debug")
                        .HasColumnType("boolean");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<bool>("Enabled")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("ExpirationDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Filename")
                        .HasColumnType("character varying");

                    b.Property<double>("Jitter")
                        .HasColumnType("double precision");

                    b.Property<string>("Key")
                        .HasColumnType("text");

                    b.Property<int>("LanguageId")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("LastDownloaded")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Name")
                        .HasColumnType("character varying");

                    b.Property<int>("TransportId")
                        .HasColumnType("integer");

                    b.Property<bool>("Visible")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.HasIndex("AgentTransportTypeId");

                    b.HasIndex("AgentTypeArchitectureId");

                    b.HasIndex("AgentTypeConfigurationId");

                    b.HasIndex("AgentTypeFormatId");

                    b.HasIndex("AgentTypeId");

                    b.HasIndex("AgentTypeOperatingSystemId");

                    b.HasIndex("AgentTypeVersionId");

                    b.HasIndex("Filename")
                        .IsUnique()
                        .HasName("Payload_Filename_key");

                    b.HasIndex("LanguageId");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasName("Payload_Name_key");

                    b.HasIndex("TransportId");

                    b.ToTable("Payload");
                });

            modelBuilder.Entity("Faction.Common.Models.StagingMessage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("AgentName")
                        .HasColumnType("text");

                    b.Property<string>("HMAC")
                        .HasColumnName("HMAC")
                        .HasColumnType("text");

                    b.Property<string>("IV")
                        .HasColumnName("IV")
                        .HasColumnType("text");

                    b.Property<string>("Message")
                        .HasColumnType("character varying");

                    b.Property<int>("PayloadId")
                        .HasColumnType("integer");

                    b.Property<string>("PayloadName")
                        .HasColumnType("text");

                    b.Property<DateTime?>("Received")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("SourceIp")
                        .HasColumnType("text");

                    b.Property<string>("StagingId")
                        .HasColumnType("text");

                    b.Property<int?>("StagingResponseId")
                        .HasColumnType("integer");

                    b.Property<int>("TransportId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("PayloadId");

                    b.HasIndex("StagingResponseId")
                        .IsUnique();

                    b.HasIndex("TransportId");

                    b.ToTable("StagingMessage");
                });

            modelBuilder.Entity("Faction.Common.Models.StagingResponse", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int?>("AgentId")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("Created")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("HMAC")
                        .HasColumnName("HMAC")
                        .HasColumnType("text");

                    b.Property<string>("IV")
                        .HasColumnName("IV")
                        .HasColumnType("text");

                    b.Property<string>("Message")
                        .HasColumnType("character varying");

                    b.Property<bool>("Sent")
                        .HasColumnType("boolean");

                    b.Property<int>("StagingMessageId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("AgentId")
                        .IsUnique();

                    b.ToTable("StagingResponse");
                });

            modelBuilder.Entity("Faction.Common.Models.Transport", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int?>("ApiKeyId")
                        .HasColumnType("integer");

                    b.Property<string>("Configuration")
                        .HasColumnType("text");

                    b.Property<DateTime?>("Created")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("Enabled")
                        .HasColumnType("boolean");

                    b.Property<string>("Guid")
                        .HasColumnType("character varying");

                    b.Property<DateTime?>("LastCheckin")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Name")
                        .HasColumnType("character varying");

                    b.Property<string>("TransportType")
                        .HasColumnType("character varying");

                    b.Property<bool>("Visible")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.ToTable("Transport");
                });

            modelBuilder.Entity("Faction.Common.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<bool?>("Authenticated")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("Created")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("Enabled")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LastLogin")
                        .HasColumnType("timestamp without time zone");

                    b.Property<byte[]>("Password")
                        .HasColumnType("bytea");

                    b.Property<int>("RoleId")
                        .HasColumnType("integer");

                    b.Property<string>("Username")
                        .HasColumnType("character varying");

                    b.Property<bool>("Visible")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.HasIndex("Username")
                        .IsUnique()
                        .HasName("User_Username_key");

                    b.ToTable("User");
                });

            modelBuilder.Entity("Faction.Common.Models.UserRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("character varying");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasName("UserRole_Name_key");

                    b.ToTable("UserRole");
                });

            modelBuilder.Entity("Faction.Common.Models.Agent", b =>
                {
                    b.HasOne("Faction.Common.Models.AgentType", "AgentType")
                        .WithMany("Agents")
                        .HasForeignKey("AgentTypeId")
                        .HasConstraintName("Agent_AgentTypeId_fkey")
                        .IsRequired();

                    b.HasOne("Faction.Common.Models.Payload", "Payload")
                        .WithMany("Agents")
                        .HasForeignKey("PayloadId")
                        .HasConstraintName("Agent_PayloadId_fkey")
                        .IsRequired();

                    b.HasOne("Faction.Common.Models.Transport", "Transport")
                        .WithMany("Agents")
                        .HasForeignKey("TransportId")
                        .HasConstraintName("Agent_TransportId_fkey")
                        .IsRequired();
                });

            modelBuilder.Entity("Faction.Common.Models.AgentCheckin", b =>
                {
                    b.HasOne("Faction.Common.Models.Agent", "Agent")
                        .WithMany("AgentCheckins")
                        .HasForeignKey("AgentId")
                        .HasConstraintName("AgentCheckin_AgentId_fkey");

                    b.HasOne("Faction.Common.Models.Transport", "Transport")
                        .WithMany("AgentCheckins")
                        .HasForeignKey("TransportId")
                        .HasConstraintName("AgentCheckin_TransportId_fkey")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Faction.Common.Models.AgentTask", b =>
                {
                    b.HasOne("Faction.Common.Models.Agent", "Agent")
                        .WithMany("AgentTask")
                        .HasForeignKey("AgentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Faction.Common.Models.ConsoleMessage", "ConsoleMessage")
                        .WithOne("AgentTask")
                        .HasForeignKey("Faction.Common.Models.AgentTask", "ConsoleMessageId");
                });

            modelBuilder.Entity("Faction.Common.Models.AgentTaskMessage", b =>
                {
                    b.HasOne("Faction.Common.Models.Agent", "Agent")
                        .WithMany("AgentTaskMessages")
                        .HasForeignKey("AgentId")
                        .HasConstraintName("AgentTaskMessage_AgentId_fkey");

                    b.HasOne("Faction.Common.Models.AgentTask", "AgentTask")
                        .WithOne("AgentTaskMessage")
                        .HasForeignKey("Faction.Common.Models.AgentTaskMessage", "AgentTaskId");
                });

            modelBuilder.Entity("Faction.Common.Models.AgentTaskUpdate", b =>
                {
                    b.HasOne("Faction.Common.Models.Agent", "Agent")
                        .WithMany("AgentTaskUpdates")
                        .HasForeignKey("AgentId")
                        .HasConstraintName("AgentTaskUpdate_AgentId_fkey")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Faction.Common.Models.AgentTask", "AgentTask")
                        .WithMany("AgentTaskUpdates")
                        .HasForeignKey("TaskId")
                        .HasConstraintName("AgentTaskUpdate_TaskId_fkey");
                });

            modelBuilder.Entity("Faction.Common.Models.AgentTransportType", b =>
                {
                    b.HasOne("Faction.Common.Models.AgentType", "AgentType")
                        .WithMany("AgentTransportTypes")
                        .HasForeignKey("AgentTypeId")
                        .HasConstraintName("AgentTransportType_AgentTypeId_fkey")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Faction.Common.Models.AgentType", b =>
                {
                    b.HasOne("Faction.Common.Models.Language", "Language")
                        .WithMany("AgentTypes")
                        .HasForeignKey("LanguageId")
                        .HasConstraintName("AgentType_LanguageId_fkey")
                        .IsRequired();
                });

            modelBuilder.Entity("Faction.Common.Models.AgentTypeArchitecture", b =>
                {
                    b.HasOne("Faction.Common.Models.AgentType", "AgentType")
                        .WithMany("AgentTypeArchitectures")
                        .HasForeignKey("AgentTypeId")
                        .HasConstraintName("AgentTypeArchitecture_AgentTypeId_fkey")
                        .IsRequired();
                });

            modelBuilder.Entity("Faction.Common.Models.AgentTypeConfiguration", b =>
                {
                    b.HasOne("Faction.Common.Models.AgentType", "AgentType")
                        .WithMany("AgentTypeConfigurations")
                        .HasForeignKey("AgentTypeId")
                        .HasConstraintName("AgentTypeConfiguration_AgentTypeId_fkey")
                        .IsRequired();
                });

            modelBuilder.Entity("Faction.Common.Models.AgentTypeFormat", b =>
                {
                    b.HasOne("Faction.Common.Models.AgentType", "AgentType")
                        .WithMany("AgentTypeFormats")
                        .HasForeignKey("AgentTypeId")
                        .HasConstraintName("AgentTypeFormat_AgentTypeId_fkey")
                        .IsRequired();
                });

            modelBuilder.Entity("Faction.Common.Models.AgentTypeOperatingSystem", b =>
                {
                    b.HasOne("Faction.Common.Models.AgentType", "AgentType")
                        .WithMany("AgentTypeOperatingSystems")
                        .HasForeignKey("AgentTypeId")
                        .HasConstraintName("AgentTypeOperatingSystem_AgentTypeId_fkey")
                        .IsRequired();
                });

            modelBuilder.Entity("Faction.Common.Models.AgentTypeVersion", b =>
                {
                    b.HasOne("Faction.Common.Models.AgentType", "AgentType")
                        .WithMany("AgentTypeVersions")
                        .HasForeignKey("AgentTypeId")
                        .HasConstraintName("AgentTypeVersion_AgentTypeId_fkey")
                        .IsRequired();
                });

            modelBuilder.Entity("Faction.Common.Models.AgentsModulesXref", b =>
                {
                    b.HasOne("Faction.Common.Models.Agent", "Agent")
                        .WithMany("AgentsModulesXref")
                        .HasForeignKey("AgentId")
                        .HasConstraintName("AgentsModulesXREF_AgentId_fkey")
                        .IsRequired();

                    b.HasOne("Faction.Common.Models.Module", "Module")
                        .WithMany("AgentsModulesXref")
                        .HasForeignKey("ModuleId")
                        .HasConstraintName("AgentsModulesXREF_TransportId_fkey")
                        .IsRequired();
                });

            modelBuilder.Entity("Faction.Common.Models.AgentsTransportsXref", b =>
                {
                    b.HasOne("Faction.Common.Models.Agent", "Agent")
                        .WithMany("AgentsTransportsXref")
                        .HasForeignKey("AgentId")
                        .HasConstraintName("AgentsTransportsXREF_AgentId_fkey")
                        .IsRequired();

                    b.HasOne("Faction.Common.Models.Transport", "Transport")
                        .WithMany("AgentsTransportsXref")
                        .HasForeignKey("TransportId")
                        .HasConstraintName("AgentsTransportsXREF_TransportId_fkey")
                        .IsRequired();
                });

            modelBuilder.Entity("Faction.Common.Models.ApiKey", b =>
                {
                    b.HasOne("Faction.Common.Models.Transport", "Transport")
                        .WithOne("ApiKey")
                        .HasForeignKey("Faction.Common.Models.ApiKey", "TransportId");

                    b.HasOne("Faction.Common.Models.User", "User")
                        .WithMany("ApiKeys")
                        .HasForeignKey("UserId")
                        .HasConstraintName("ApiKey_UserId_fkey")
                        .IsRequired();
                });

            modelBuilder.Entity("Faction.Common.Models.Command", b =>
                {
                    b.HasOne("Faction.Common.Models.AgentType", "AgentType")
                        .WithMany("Commands")
                        .HasForeignKey("AgentTypeId")
                        .HasConstraintName("Command_AgentTypeId_fkey");

                    b.HasOne("Faction.Common.Models.Module", "Module")
                        .WithMany("Commands")
                        .HasForeignKey("ModuleId")
                        .HasConstraintName("Command_ModuleId_fkey");
                });

            modelBuilder.Entity("Faction.Common.Models.CommandParameter", b =>
                {
                    b.HasOne("Faction.Common.Models.Command", "Command")
                        .WithMany("Parameters")
                        .HasForeignKey("CommandId")
                        .HasConstraintName("CommandParameter_CommandId_fkey")
                        .IsRequired();
                });

            modelBuilder.Entity("Faction.Common.Models.ConsoleMessage", b =>
                {
                    b.HasOne("Faction.Common.Models.Agent", "Agent")
                        .WithMany("ConsoleMessages")
                        .HasForeignKey("AgentId")
                        .HasConstraintName("ConsoleMessage_AgentId_fkey")
                        .IsRequired();

                    b.HasOne("Faction.Common.Models.User", "User")
                        .WithMany("ConsoleMessages")
                        .HasForeignKey("UserId")
                        .HasConstraintName("ConsoleMessage_UserId_fkey");
                });

            modelBuilder.Entity("Faction.Common.Models.FactionFile", b =>
                {
                    b.HasOne("Faction.Common.Models.Agent", "Agent")
                        .WithMany()
                        .HasForeignKey("AgentId");

                    b.HasOne("Faction.Common.Models.User", "User")
                        .WithMany("FactionFiles")
                        .HasForeignKey("UserId")
                        .HasConstraintName("User_FactionFileId_fkey")
                        .IsRequired();
                });

            modelBuilder.Entity("Faction.Common.Models.IOC", b =>
                {
                    b.HasOne("Faction.Common.Models.AgentTaskUpdate", "AgentTaskUpdate")
                        .WithMany("IOCs")
                        .HasForeignKey("AgentTaskUpdateId")
                        .HasConstraintName("Agent_IOCId_fkey")
                        .IsRequired();

                    b.HasOne("Faction.Common.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Faction.Common.Models.Module", b =>
                {
                    b.HasOne("Faction.Common.Models.Language", "Language")
                        .WithMany("Modules")
                        .HasForeignKey("LanguageId")
                        .HasConstraintName("Module_LanguageId_fkey")
                        .IsRequired();
                });

            modelBuilder.Entity("Faction.Common.Models.Payload", b =>
                {
                    b.HasOne("Faction.Common.Models.AgentTransportType", "AgentTransportType")
                        .WithMany("Payloads")
                        .HasForeignKey("AgentTransportTypeId")
                        .HasConstraintName("Payload_AgentTransportTypeId_fkey")
                        .IsRequired();

                    b.HasOne("Faction.Common.Models.AgentTypeArchitecture", "AgentTypeArchitecture")
                        .WithMany()
                        .HasForeignKey("AgentTypeArchitectureId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Faction.Common.Models.AgentTypeConfiguration", "AgentTypeConfiguration")
                        .WithMany()
                        .HasForeignKey("AgentTypeConfigurationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Faction.Common.Models.AgentTypeFormat", "AgentTypeFormat")
                        .WithMany()
                        .HasForeignKey("AgentTypeFormatId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Faction.Common.Models.AgentType", "AgentType")
                        .WithMany("Payloads")
                        .HasForeignKey("AgentTypeId")
                        .HasConstraintName("Payload_AgentTypeId_fkey")
                        .IsRequired();

                    b.HasOne("Faction.Common.Models.AgentTypeOperatingSystem", "AgentTypeOperatingSystem")
                        .WithMany()
                        .HasForeignKey("AgentTypeOperatingSystemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Faction.Common.Models.AgentTypeVersion", "AgentTypeVersion")
                        .WithMany()
                        .HasForeignKey("AgentTypeVersionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Faction.Common.Models.Language", "Language")
                        .WithMany("Payloads")
                        .HasForeignKey("LanguageId")
                        .HasConstraintName("Payload_LanguageId_fkey")
                        .IsRequired();

                    b.HasOne("Faction.Common.Models.Transport", "Transport")
                        .WithMany("Payloads")
                        .HasForeignKey("TransportId")
                        .HasConstraintName("Payload_TransportId_fkey")
                        .IsRequired();
                });

            modelBuilder.Entity("Faction.Common.Models.StagingMessage", b =>
                {
                    b.HasOne("Faction.Common.Models.Payload", "Payload")
                        .WithMany("StagingMessages")
                        .HasForeignKey("PayloadId")
                        .HasConstraintName("StagingMessage_PayloadId_fkey")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Faction.Common.Models.StagingResponse", "StagingResponse")
                        .WithOne("StagingMessage")
                        .HasForeignKey("Faction.Common.Models.StagingMessage", "StagingResponseId");

                    b.HasOne("Faction.Common.Models.Transport", "Transport")
                        .WithMany("StagingMessages")
                        .HasForeignKey("TransportId")
                        .HasConstraintName("StagingMessage_TransportId_fkey")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Faction.Common.Models.StagingResponse", b =>
                {
                    b.HasOne("Faction.Common.Models.Agent", "Agent")
                        .WithOne("StagingResponse")
                        .HasForeignKey("Faction.Common.Models.StagingResponse", "AgentId");
                });

            modelBuilder.Entity("Faction.Common.Models.User", b =>
                {
                    b.HasOne("Faction.Common.Models.UserRole", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleId")
                        .HasConstraintName("User_RoleId_fkey")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
